#textdomain wesnoth-Roboke

### ! allow player to switch map(s) during his turn
### ! here: Cave/Hills

#define REDRAWNOW
    [redraw]
        clear_shroud=yes
    [/redraw]
#enddef

#define MENU_ST_NONE
    [clear_menu_item]
        id=mi_cave
    [/clear_menu_item]
#enddef

#define MENU_ST_CAVE
    [set_menu_item]
        id=mi_cave
        description=_"switch to cave"
        [command]
            {FIREEVENT switchtocaveandredraw}
        [/command]
        [show_if]
            {VARIABLE_CONDITIONAL enablecave equals 1}
        [/show_if]
    [/set_menu_item]
#enddef

#define MENU_ST_LAND
    [set_menu_item]
        id=mi_cave
        description=_"switch to land"
        [command]
            {FIREEVENT switchtolandandredraw}
        [/command]
        [show_if]
            {VARIABLE_CONDITIONAL enablecave equals 1}
        [/show_if]
    [/set_menu_item]
#enddef

#define MENU_ST_READD
    {IFTHENELSE {VARIABLE_CONDITIONAL iscave equals 1} {MENU_ST_LAND} {MENU_ST_CAVE}}
#enddef

#define LOAD_SHROUD_MAP VAR
    [load_shroud_map]
        variable={VAR}
    [/load_shroud_map]
#enddef

#define SAVE_SHROUD_MAP VAR
    [save_shroud_map]
        variable={VAR}
    [/save_shroud_map]
#enddef

#define LOAD_FOG_MAP VAR
    [reset_fog]
        reset_view=yes
    [/reset_fog]
    [load_fog_map]
        variable={VAR}
    [/load_fog_map]
#enddef

#define SAVE_FOG_MAP VAR
    [save_fog_map]
        variable={VAR}
    [/save_fog_map]
#enddef

#define SWITCHTOLAND POSTWML
    {IFVAR iscave (equals=1) (
        {FIREEVENT switchtoland}
        {POSTWML}
    )}
#enddef

#define SWITCHTOCAVE POSTWML
    {IFVAR iscave (equals=0) (
        {FIREEVENT switchtocave}
        {POSTWML}
    )}
#enddef

#define ADD_CAVE_ITEMS
    {FOREACH caveitems i}
        {VARIABLE CID $caveitems[$i].id}
        {IFVAR cave_item_picked_up.$CID (not_equals=yes) (
            [item]
                x,y=$caveitems[$i].x,$caveitems[$i].y
                image=$caveitems[$i].image
            [/item]
        )}
        {CLEAR_VARIABLE CID}
    {NEXT i}
#enddef

#define REMOVE_CAVE_ITEMS
    {FOREACH caveitems i}
        {VARIABLE CID $caveitems[$i].id}
        {IFVAR cave_item_picked_up.$CID (not_equals=yes) (
            [remove_item]
                x,y=$caveitems[$i].x,$caveitems[$i].y
            [/remove_item]
        )}
        {CLEAR_VARIABLE CID}
    {NEXT i}
#enddef

#define ADD_HILL_ITEMS
    {FOREACH hillitems i}
        {VARIABLE CID $hillitems[$i].id}
        {IFVAR hill_item_picked_up.$CID (not_equals=yes) (
            [item]
                x,y=$hillitems[$i].x,$hillitems[$i].y
                image=$hillitems[$i].image
            [/item]
        )}
        {CLEAR_VARIABLE CID}
    {NEXT i}
#enddef

#define REMOVE_HILL_ITEMS
    {FOREACH hillitems i}
        {VARIABLE CID $hillitems[$i].id}
        {IFVAR hill_item_picked_up.$CID (not_equals=yes) (
            [remove_item]
                x,y=$hillitems[$i].x,$hillitems[$i].y
            [/remove_item]
        )}
        {CLEAR_VARIABLE CID}
    {NEXT i}
#enddef

#define FINDROBINCAVE LEADERID
    {VARIABLE leaderincave 0}
    {FOREACH caveunits i}
        {IFCOND {VARIABLE_CONDITIONAL caveunits[$i].id equals {LEADERID}} (
            {VARIABLE leaderincave 1}
            [set_variables]
                name=leadercopy
                to_variable=caveunits[$i]
            [/set_variables]
        )}
    {NEXT i}
    {IFCOND {VARIABLE_CONDITIONAL leaderincave equals 0}
    {GRAB_UNIT id={LEADERID} leadercopy}
    }
#enddef

#define FINDROBONLAND LEADERID
    {VARIABLE leaderincave 1}
    {FOREACH landunits i}
        {IFCOND {VARIABLE_CONDITIONAL landunits[$i].id equals {LEADERID}} (
            {VARIABLE leaderincave 0}
            [set_variables]
                name=leadercopy
                to_variable=landunits[$i]
            [/set_variables]
        )}
    {NEXT i}
    {IFCOND {VARIABLE_CONDITIONAL leaderincave equals 1}
    {GRAB_UNIT {LEADERID} leadercopy}
    }
#enddef

#define FINDROB LEADERID
    {UNFAKE {LEADERID}}
    {CLEAR_VARIABLE leadercopy}
    {IFTHENELSE {VARIABLE_CONDITIONAL iscave equals 1} ({FINDROBONLAND {LEADERID}}) ({FINDROBINCAVE {LEADERID}})}
#enddef

#define FINDROBHERE LEADERID
    {GRAB_UNIT {LEADERID} ignore}
    {VARIABLE robishere $ignore.length}
    {CLEAR_VARIABLE ignore}
#enddef

#define ENSUREFAKECAVE LEADERID
    {FINDROB {LEADERID}}
    {VARIABLE playerincave $leaderincave}
    {FINDROBHERE {LEADERID}}
    {IFCOND (
        {VARIABLE_CONDITIONAL playerincave equals 0}
        {ANDVAR leaderfaked (equals=0)}
        {ANDVAR robishere (equals=0)}
    ) (
        {VARIABLE leaderfaked 1}
        [unstore_unit]
            variable=leadercopy
            find_vacant=yes
            advance=no
            x,y=1,1
        [/unstore_unit]
        [hide_unit]
            id={LEADERID}
        [/hide_unit]
        [petrify]
            id={LEADERID}
        [/petrify]
    )}
#enddef

#define ENSUREFAKELAND LEADERID
    {FINDROB {LEADERID}}
    {VARIABLE playerincave $leaderincave}
    {FINDROBHERE {LEADERID}}
    {IFCOND (
        {VARIABLE_CONDITIONAL playerincave equals 1}
        {ANDVAR leaderfaked (equals=0)}
        {ANDVAR robishere (equals=0)}
    ) (
        {VARIABLE leaderfaked 1}
        [unstore_unit]
            variable=leadercopy
            find_vacant=yes
            advance=no
            x,y=1,1
        [/unstore_unit]
        [hide_unit]
            id={LEADERID}
        [/hide_unit]
        [petrify]
            id={LEADERID}
        [/petrify]
    )}
#enddef

###############################################################################

{~add-ons/Roboke/utils/cave_turn.cfg}

#define CALCULATE_CAVE_HEALING LEADERID
    {CALCULATE_HEALING caveunits (
        # hook: called for each {UNITS}[$i]
        {IFVAR caveunits[$i].id (equals={LEADERID}) {VARIABLE leaderincave 1} }
    )}
    {CLEAR_VARIABLE caveunits}
#enddef

###############################################################################

#define CAVEGOLD X Y AMOUNT
    [event]
        name=init_cave_item__gold_{X}_{Y}
        [set_variables]
            name=caveitems
            mode=append
            [value]
                id=gold_{X}_{Y}
                x={X}
                y={Y}
                image="items/gold-coins-small.png"
            [/value]
        [/set_variables]
        {VARIABLE cave_item_picked_up.gold_{X}_{Y} no}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter]
            side=1
            x={X}
            y={Y}
        [/filter]
        [if]
            {VARIABLE_CONDITIONAL iscave equals 1}
            {ANDVAR cave_item_picked_up.gold_{X}_{Y} (not_equals=yes)}
            [then]
                {VARIABLE cave_item_picked_up.gold_{X}_{Y} yes}
                {VARIABLE goldamount {AMOUNT}}
                [message]
                    speaker=unit
                    image=items/gold-coins-medium.png
                    message= _ "There are jewels in the cave-wall ($goldamount gold)."
                [/message]
                {CLEAR_VARIABLE goldamount}
                [gold]
                    amount={AMOUNT}
                    side=1
                [/gold]
                [sound]
                    name=gold.wav
                [/sound]
                [remove_item]
                    x,y={X},{Y}
                [/remove_item]
            [/then]
        [/if]
    [/event]
#enddef

# based on PICKUPPABLE_ITEM
#define CAVE_ITEM ID X Y CAN_TAKE_FILTER_WML IMAGE TEXT TAKE_IT_STRING LEAVE_IT_STRING CANNOT_TAKE_TEXT OBJECT_WML
    ## invisible for now -- show only in one mode..
    [event]
        name=init_cave_item__{ID}
        [set_variables]
            name=caveitems
            mode=append
            [value]
                id={ID}
                x={X}
                y={Y}
                image={IMAGE}
            [/value]
        [/set_variables]
        {VARIABLE cave_item_picked_up.{ID} no}
    [/event]

    [event]
        name=moveto
        first_time_only=no
        [filter]
            x,y={X},{Y}
            [and]
                {VARIABLE_CONDITIONAL iscave equals 1}
            [/and]
        [/filter]

        {IFTHENELSE (
            [have_unit]
                x,y={X},{Y}
                {CAN_TAKE_FILTER_WML}
            [/have_unit]

            [variable]
                name=cave_item_picked_up.{ID}
                not_equals=yes
            [/variable]
        ) (
            [message]
                speaker=narrator
                message={TEXT}
                image={IMAGE}
                [option]
                    message={TAKE_IT_STRING}
                    [command]
                        {OBJECT_WML}
                        [remove_item]
                            x,y={X},{Y}
                        [/remove_item]
                        [set_variable]
                            name=cave_item_picked_up.{ID}
                            value=yes
                        [/set_variable]
                    [/command]
                [/option]
                [option]
                    message={LEAVE_IT_STRING}
                    [command]
                        [allow_undo]
                        [/allow_undo]
                    [/command]
                [/option]
            [/message]
        ) (
            {IFVAR cave_item_picked_up.{ID} (not_equals=yes) (
                [message]
                    speaker=narrator
                    message={CANNOT_TAKE_TEXT}
                    image={IMAGE}
                    side_for=$side_number
                [/message]
            )}
            [allow_undo]
            [/allow_undo]
        )}
    [/event]
#enddef

#define HILL_ITEM ID X Y CAN_TAKE_FILTER_WML IMAGE TEXT TAKE_IT_STRING LEAVE_IT_STRING CANNOT_TAKE_TEXT OBJECT_WML
    [event]
        name=init_hill_item__{ID}
        [set_variables]
            name=hillitems
            mode=append
            [value]
                id={ID}
                x={X}
                y={Y}
                image={IMAGE}
            [/value]
        [/set_variables]
        {VARIABLE hill_item_picked_up.{ID} no}
    [/event]

    [event]
        name=moveto
        first_time_only=no
        [filter]
            x,y={X},{Y}
            [and]
                {VARIABLE_CONDITIONAL iscave equals 0}
            [/and]
        [/filter]

        {IFTHENELSE (
            [have_unit]
                x,y={X},{Y}
                {CAN_TAKE_FILTER_WML}
            [/have_unit]

            [variable]
                name=hill_item_picked_up.{ID}
                not_equals=yes
            [/variable]
        ) (
            [message]
                speaker=narrator
                message={TEXT}
                image={IMAGE}
                [option]
                    message={TAKE_IT_STRING}
                    [command]
                        {OBJECT_WML}
                        [remove_item]
                            x,y={X},{Y}
                        [/remove_item]
                        [set_variable]
                            name=hill_item_picked_up.{ID}
                            value=yes
                        [/set_variable]
                    [/command]
                [/option]
                [option]
                    message={LEAVE_IT_STRING}
                    [command]
                        [allow_undo]
                        [/allow_undo]
                    [/command]
                [/option]
            [/message]
        ) (
            {IFVAR hill_item_picked_up.{ID} (not_equals=yes) (
                [message]
                    speaker=narrator
                    message={CANNOT_TAKE_TEXT}
                    image={IMAGE}
                    side_for=$side_number
                [/message]
            )}
            [allow_undo]
            [/allow_undo]
        )}
    [/event]
#enddef

###############################################################################

#define UNFAKE LEADERID
    {IFVAR leaderfaked (equals=1) (
        {VARIABLE leaderfaked 0}
        {STORE_UNIT {LEADERID} leadercopy}
    )}
#enddef

## main setup function
##  MAPHILL, MAPCAVE: map file paths
##  FXC, FXL: fix-up macros, executed after loading the map (usually empty)
## CAVEBOUNDSIDES: filter non-player sides that are in the 'cave'
## FIC, FIL:  Filter units only present in cave,
## FLV : filter villages that are only in the hills (and not in cave)
##       NB. cave-village terrain filter is hardcoded
## STC, STL: switch to cave/land hooks (usually empty)

#define SETUP_CAVE_EVENTS MAPHILL MAPCAVE LEADERID FXC FXL CAVEBOUNDSIDES FIC FIL FLV STC STL
    [event]
        name=switchtoland
        first_time_only=no

        {UNFAKE {LEADERID}}

        {VARIABLE iscave 0}
        {SAVE_SHROUD_MAP caveshroud}
        {SAVE_FOG_MAP cavefog}

        {STL}

        [store_unit]
            {{FIC} ()}
            variable=caveunits
            kill=yes
        [/store_unit]

        [store_villages]
            terrain=U*, U*^*, Q*, Q*^*, Xu*, Ku*, Cu*
            variable=cavevillages
        [/store_villages]

        {REMOVE_CAVE_ITEMS}

        [replace_map]
            map={MAPHILL}
        [/replace_map]

        {{FXL}}

        {LOAD_SHROUD_MAP landshroud}
        {LOAD_FOG_MAP landfog}

        {FOREACH landunits i}
            [unstore_unit]
                variable=landunits[$i]
                find_vacant=no
            [/unstore_unit]
        {NEXT i}

        {FOREACH landvillages i}
            [capture_village]
                x,y=$landvillages[$i].x,$landvillages[$i].y
                side=$landvillages[$i].owner_side
                fire_event=no
            [/capture_village]
        {NEXT i}

        {ADD_HILL_ITEMS}

        {CLEAR_VARIABLE landunits}
        {CLEAR_VARIABLE landvillages}
        {CLEAR_VARIABLE landshroud}
        {CLEAR_VARIABLE landfog}
        {MENU_ST_CAVE}
        {ENSUREFAKELAND {LEADERID}}
    [/event]

    [event]
        name=switchtocave
        first_time_only=no

        {UNFAKE {LEADERID}}

        {STC}

        {VARIABLE iscave 1}
        {SAVE_SHROUD_MAP landshroud}
        {SAVE_FOG_MAP landfog}

        [store_unit]
            {{FIL} ()}
            variable=landunits
            kill=yes
        [/store_unit]

        [store_villages]
            {{FLV}}
            variable=landvillages
        [/store_villages]

        {REMOVE_HILL_ITEMS}

        [replace_map]
            map={MAPCAVE}
        [/replace_map]

        {{FXC}}

        {LOAD_SHROUD_MAP caveshroud}
        {LOAD_FOG_MAP cavefog}

        {FOREACH caveunits i}
            [unstore_unit]
                variable=caveunits[$i]
                find_vacant=no
            [/unstore_unit]
        {NEXT i}

        {FOREACH cavevillages i}
            [capture_village]
                x,y=$cavevillages[$i].x,$cavevillages[$i].y
                side=$cavevillages[$i].owner_side
                fire_event=no
            [/capture_village]
        {NEXT i}

        {ADD_CAVE_ITEMS}

        {CLEAR_VARIABLE caveunits}
        {CLEAR_VARIABLE cavevillages}
        {CLEAR_VARIABLE caveshroud}
        {CLEAR_VARIABLE cavefog}
        {MENU_ST_LAND}
        {ENSUREFAKECAVE {LEADERID}}
    [/event]

    [event]
        # switch to layer where player's leader is..
        # (otherwise he is defeated)

        # fires after side finished its turn
        name=side turn end
        first_time_only=no

        {IFCOND (
            {VARIABLE_CONDITIONAL side_number equals 1}
            {ANDVAR enablecave (equals=1)}
        ) (
            # store/copy leader and remember his 'real' layer
            {FINDROB {LEADERID}}
            {VARIABLE playerincave $leaderincave}
            {IFVAR playerincave (not_equals=$iscave) (
                {IFTHENELSE {VARIABLE_CONDITIONAL iscave not_equals 1} {SWITCHTOCAVE ()} {SWITCHTOLAND ()}}
            )}
        )}
    [/event]

    [event]
        # Player: (side 1)
        #  calculate healing/poison/income in cave, switch to top,
        #  continue (wesnoth-engine does the calc for the top layer)
        #
        # non-player sides:
        #  switch to sides's main layer

        # fires *before* the player's turn (BEFORE healing, income, etc)
        name=side turn
        first_time_only=no

        {IFCOND (
            {VARIABLE_CONDITIONAL side_number equals 1}
            {ANDVAR turn_number (not_equals=1)}
            {ANDVAR enablecave (equals=1)}
        ) (
            {MENU_ST_READD}
            {VARIABLE leaderincave 0}
            {SWITCHTOCAVE {REDRAWNOW}}
            [store_unit]
                {{FIC} ()}
                variable=caveunits
            [/store_unit]
            {CALCULATE_CAVE_HEALING {LEADERID}}
            {SWITCHTOLAND {REDRAWNOW}}
        )}

        {IFCOND (
            {VARIABLE_CONDITIONAL side_number not_equals 1}
            {ANDVAR enablecave (equals=1)}
        ) (
            {IFTHENELSE {CAVEBOUNDSIDES} {SWITCHTOCAVE ()} {SWITCHTOLAND ()}}
        )}

        {IFCOND (
            {VARIABLE_CONDITIONAL side_number equals 2}
            {ANDVAR multisidecave (equals=1)}
        ) (
            {MENU_ST_NONE}
            {REDRAWNOW}
        )}
    [/event]

    [event]
        # switch to layer with leader
        # (needs to be visible for scenarios with 'victory_when_enemies_defeated=yes'
        # for player, 'side turn' always leaves us with "LAND" here
        # nad 'CALCULATE_CAVE_HEALING' will have set 'leaderincave' variable
        # if the leader is in the cave.

        # fires just before the player's turn (after healing, income, etc)
        name=turn refresh
        first_time_only=no

        {IFCOND (
            {VARIABLE_CONDITIONAL side_number equals 1}
            {ANDVAR playerincave (equals=1)}
            {ANDVAR turn_number (not_equals=1)}
            {ANDVAR enablecave (equals=1)}
        ) (
            {SWITCHTOCAVE {REDRAWNOW}}
        )}
        # TODO auto-moves & move-orders across layer boundaries
    [/event]

    [event]
        name=initcavevars
        {CLEAR_VARIABLE caveitems}
        {CLEAR_VARIABLE hillitems}
        {CLEAR_VARIABLE cave_item_picked_up}
        {CLEAR_VARIABLE hill_item_picked_up}
        {VARIABLE leaderfaked 0}
        {VARIABLE playerincave 0}
        {VARIABLE enablecave 0}
        {VARIABLE leaderincave 0}
        {VARIABLE iscave 0}
        {VARIABLE multisidecave 0}
        [set_variables]
            name=caveitems
        [/set_variables]
        [set_variables]
            name=hillitems
        [/set_variables]
        [set_variables]
            name=cave_item_picked_up
        [/set_variables]
        [set_variables]
            name=hill_item_picked_up
        [/set_variables]
    [/event]

    [event]
        name=enablecave
        {VARIABLE enablecave 1}
        {MENU_ST_CAVE}
        # TODO - common code to setup shroud/fog -- per scenario.
        #{SAVE_SHROUD_MAP caveshroud}
        #{SAVE_FOG_MAP cavefog}
    [/event]

    [event]
        name=cleanupcave
        {CLEAR_VARIABLE caveitems}
        {CLEAR_VARIABLE cave_item_picked_up}
        {CLEAR_VARIABLE hillitems}
        {CLEAR_VARIABLE hill_item_picked_up}
        {CLEAR_VARIABLE leaderfaked}
        {CLEAR_VARIABLE playerincave}
        {CLEAR_VARIABLE enablecave}
        {CLEAR_VARIABLE leaderincave}
        {CLEAR_VARIABLE iscave}
        {CLEAR_VARIABLE multisidecave}
        {CLEAR_VARIABLE robishere}

        {CLEAR_VARIABLE caveunits}
        {CLEAR_VARIABLE cavevillages}
        {CLEAR_VARIABLE caveshroud}
        {CLEAR_VARIABLE cavefog}

        {CLEAR_VARIABLE landunits}
        {CLEAR_VARIABLE landvillages}
        {CLEAR_VARIABLE landshroud}
        {CLEAR_VARIABLE landfog}
        {MENU_ST_NONE}
    [/event]

    [event]
        name=switchtocaveandredraw
        first_time_only=no
        {FIREEVENT switchtocave}
        {REDRAWNOW}
    [/event]

    [event]
        name=switchtolandandredraw
        first_time_only=no
        {FIREEVENT switchtoland}
        {REDRAWNOW}
    [/event]

#enddef

# vim:ts=2 sw=2 et:
