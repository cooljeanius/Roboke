#wmllint: no translatables

# compare to play_controller.cpp  -- play_controller::do_init_side()

#define CALCULATE_UPKEEP UNIT VAR
    # add unit upkeep to expense.. -> spend gold -- unit::upkeep()
    # $upkeep: 'free':0 ; 'loyal':0; 'full':$level ;; leader:0 ; else <int> upkeep
    # caveunits[$i].upkeep == 'full' ? caveunits[$i].level : 0
    [if]
        [variable]
            name={UNIT}.canrecruit
            boolean_equals=yes
        [/variable]
        [then]
            {VARIABLE {VAR} 0}
        [/then]
        [else]
            [switch]
                variable={UNIT}.upkeep
                [case]
                    value="free"
                    {VARIABLE {VAR} 0}
                [/case]
                [case]
                    value="loyal"
                    {VARIABLE {VAR} 0}
                [/case]
                [else]
                    {VARIABLE {VAR} ${UNIT}.level}
                [/else]
            [/switch]
        [/else]
    [/if]
#enddef

#define CALCULATE_HEALING UNITS FOREACHWML
    {FOREACH {UNITS} i}
        {VARIABLE {UNITS}[$i].cmsg ""}
        [if]
            [variable]
                name={UNITS}[$i].side
                equals=1
            [/variable]
            [then]
                # preparations
                [get_terrain_info]
                    x,y=${UNITS}[$i].x,${UNITS}[$i].y
                    variable={UNITS}[$i].cterrain
                [/get_terrain_info]
                {VARIABLE {UNITS}[$i].cmsg ""}
                {VARIABLE {UNITS}[$i].cred 0}
                {VARIABLE {UNITS}[$i].cgreen 0}

                {CALCULATE_UPKEEP {UNITS}[$i] uupkeep}
                {VARIABLE_OP uupkeep multiply -1}
                #{DEBUG_MSG $i,${UNITS}[$i].name,$uupkeep}
                [gold]
                    side=1
                    amount=$uupkeep
                [/gold]
                {CLEAR_VARIABLE uupkeep}

                # reset movement, attacks, etc for new turn
                {CALCULATE_HEALING_DO_NEWTURN {UNITS}[$i]}
                # calculate healing/poison
                {CALCULATE_HEALING_FOR_UNIT {UNITS}[$i]}
                # actions.cpp --  reset_resting()
                {VARIABLE {UNITS}[$i].resting yes}

                {VARIABLE cmsg ${UNITS}[$i].cmsg}
                {VARIABLE cred ${UNITS}[$i].cred}
                {VARIABLE cgreen ${UNITS}[$i].cgreen}

                {CLEAR_VARIABLE {UNITS}[$i].cmsg}
                {CLEAR_VARIABLE {UNITS}[$i].cred}
                {CLEAR_VARIABLE {UNITS}[$i].cgreen}

                [unstore_unit]
                    variable={UNITS}[$i]
                    find_vacant=no
                    text=$cmsg
                    red=$cred
                    green=$cgreen
                [/unstore_unit]

                [if]
                    [variable]
                        name=cmsg
                        not_equals=""
                    [/variable]
                    [then]
                        # TODO 'heal' or 'poison' sound
                        {SCROLL_TO ${UNITS}[$i].x ${UNITS}[$i].y}
                        [sound]
                            name=heal.wav
                        [/sound]
                        [delay]
                            time=250
                        [/delay]
                    [/then]
                [/if]

                {CLEAR_VARIABLE cmsg}
                {CLEAR_VARIABLE cred}
                {CLEAR_VARIABLE cgreen}
            [/then]
        [/if]

        {FOREACHWML}
    {NEXT i}
#enddef

#define CALCULATE_HEALING_DO_NEWTURN UNIT
    #unit.cpp   -- unit::new_turn()
    [set_variable]
        name={UNIT}.moves
        value=${UNIT}.max_moves
    [/set_variable]
    [set_variable]
        name={UNIT}.attacks_left
        value=${UNIT}.max_attacks
    [/set_variable]
    # erease state-bit  STATE_UNCOVERED
    [clear_variable]
        name={UNIT}.status.uncovered
    [/clear_variable]
#enddef

#define CALC_MAX_HEALING VAR VAL
    [if]
        [variable]
            name={VAR}
            less_than={VAL}
        [/variable]
        [then]
            {VARIABLE {VAR} {VAL}}
        [/then]
    [/if]
#enddef

#define POISON_TO_INT VAR ID
    [switch]
        variable={ID}
        [case]
            value="cured"
            {VARIABLE {VAR} 2}
        [/case]
        [case]
            value="slowed"
            {VARIABLE {VAR} 1}
        [/case]
        [else]
            {VARIABLE {VAR} 0}
        [/else]
    [/switch]
#enddef

#define CALCULATE_HEALING_FOR_UNIT UNIT

    {VARIABLE healing 0}
    {VARIABLE rest_healing 0}
    # curing: 0: '', 1:"slowed", 2:"cured"
    {VARIABLE curing 0}

    ### heal/cure on underground towns and if not moved, apply poison
    # process healers and healthy-self-healers..
    # see actions.cpp -- calculate_healing()
    #  - TODO if state.not_healable -> skip; but apply poison ?!
    #  - or state.petrified -> skip
    #
    #  - check if unit with ability 'heals' is on neighboring field
    [store_unit]
        [filter]
            [filter_location]
                x,y=${UNIT}.x,${UNIT}.y
                radius=1
            [/filter_location]
            [and]
                ability=healing
                [or]
                    ability=curing
                [/or]
            [/and]
            #     [and]
            #       [not]
            #       [filter_wml]
            #         # boolean_equals=yes ?!
            #         status.petrified=yes
            #       [filter_wml]
            #       [/not]
            #     [/and]
            [and]
                # ..unless self-healing.. abilities.heals[].affect_self="yes"
                [not]
                    x,y=${UNIT}.x,${UNIT}.y
                [/not]
            [/and]
            [and]
                side=1
            [/and]
        [/filter]
        variable=healers
        kill=no
    [/store_unit]
    {FOREACH healers ii}
        #{DEBUG_MSG $ii,$healers[$ii].name,$healers[$ii].abilities.heals.id,$healers[$ii].abilities.heals.value,$healers[$ii].abilities.heals.poison}
        {FOREACH healers[$ii].abilities.heals iv}
            #{DEBUG_MSG $ii,$iv,$healers[$ii].name,$healers[$ii].abilities.heals[$iv].id,$healers[$ii].abilities.heals[$iv].value,$healers[$ii].abilities.heals[$iv].poison}
            {CALC_MAX_HEALING healing $healers[$ii].abilities.heals[$iv].value}
            {POISON_TO_INT psn healers[$ii].abilities.heals[$iv].poison}
            {CALC_MAX_HEALING curing $psn}
            {CLEAR_VARIABLE psn}
        {NEXT iv}
    {NEXT ii}
    {CLEAR_VARIABLE healers}
    #{DEBUG_MSG ${UNIT}.name,$healing,$curing}

    #  -- check for villages ... resources::game_map->gives_healing() -- store_location::terrain.heals
    {CALC_MAX_HEALING healing ${UNIT}.cterrain.healing}
    [if]
        [variable]
            name={UNIT}.cterrain.healing
            greater_than=0
        [/variable]
        [then]
            {CALC_MAX_HEALING curing 2}
        [/then]
    [/if]
    #{DEBUG_MSG ${UNIT}.name,$healing,$curing}

    {VARIABLE ishealthy no}
    {FOREACH {UNIT}.modifications.trait mi}
        [if]
            [variable]
                name={UNIT}.modifications.trait[$mi].id
                equals=healthy
            [/variable]
            [then]
                {VARIABLE ishealthy yes}
            [/then]
        [/if]
    {NEXT mi}
    #{DEBUG_MSG "${UNIT}.id ishealthy -> $ishealthy"}

    #  -- if resting || is_healthy: heal game_config::rest_heal_amount
    [if]
        [variable]
            name={UNIT}.resting
            boolean_equals=yes
        [/variable]
        [or]
            [variable]
                name=ishealthy
                boolean_equals=yes
            [/variable]
        [/or]
        [then]
            ## XXX get game-config -see lua.
            {VARIABLE rest_healing 2}
        [/then]
    [/if]

    # check regenerate
    [if]
        [variable]
            name={UNIT}.abilities.regenerate.length
            greater_than=0
        [/variable]
        [then]
            {CALC_MAX_HEALING healing ${UNIT}.abilities.regenerate.value}
            [switch]
                variable={UNIT}.abilities.regenerate.poison
                [case]
                    value="cured"
                    {CALC_MAX_HEALING curing 2}
                [/case]
                [case]
                    value="slowed"
                    {CALC_MAX_HEALING curing 1}
                [/case]
            [/switch]
        [/then]
    [/if]

    # CHECK- according to poison
    [if]
        [variable]
            name={UNIT}.status.poisoned
            boolean_equals=yes
        [/variable]
        [then]
            [switch]
                variable=curing
                [case]
                    value=2
                    {CLEAR_VARIABLE {UNIT}.status.poisoned}
                    {VARIABLE healing $rest_healing}
                [/case]
                [case]
                    value=1
                    {VARIABLE healing $rest_healing}
                [/case]
                [else]
                    # -game_config::poison_amount
                    {VARIABLE healing -8}
                [/else]
            [/switch]
        [/then]
        [else]
            {VARIABLE_OP healing add $rest_healing}
        [/else]
    [/if]

    # ALL CALCULATION DONE - APPLY IT
    #{DEBUG_MSG "calc:"${UNIT}.name,$healing,$curing}

    # limit healing
    {VARIABLE max_pos ${UNIT}.max_hitpoints}
    {VARIABLE_OP max_pos sub ${UNIT}.hitpoints}

    {VARIABLE max_neg 1}
    {VARIABLE_OP max_neg sub ${UNIT}.hitpoints}

    # Do not try to "heal" if HP >= max HP
    [if]
        [variable]
            name=healing
            greater_than=0
        [/variable]
        [and]
            [variable]
                name=pos_max
                less_than=0
            [/variable]
        [/and]
        [then]
            {VARIABLE healing 0}
        [/then]
    [/if]

    # Do nothing for petrified units
    # [if]
    #   [variable]
    #     name={UNIT}.status.petrified
    #     boolean_equals=yes
    #   [/variable]
    #   [then]
    #     {VARIABLE healing 0}
    #   [/then]
    # [/if]
    #
    # Do nothing for unhealable units
    # [if]
    #   [variable]
    #     name={UNIT}.status.unhealable
    #     boolean_equals=yes
    #   [/variable]
    #   [and]
    #   [/and]
    #   [variable]
    #     name=healing
    #     greater_than=0
    #   [/variable]
    #   [then]
    #     {VARIABLE healing 0}
    #   [/then]
    # [/if]

    [if]
        [variable]
            name=healing
            greater_than=$max_pos
        [/variable]
        [then]
            {VARIABLE healing $max_pos}
        [/then]
    [/if]

    [if]
        [variable]
            name=healing
            less_than=$max_neg
        [/variable]
        [then]
            {VARIABLE healing $max_neg}
        [/then]
    [/if]
    #{DEBUG_MSG "apply:",${UNIT}.name,$healing,$curing}

    {IFVAR healing (greater_than=0) (
        {VARIABLE {UNIT}.cmsg $healing}
        {VARIABLE {UNIT}.cgreen 255}
        {VARIABLE_OP {UNIT}.hitpoints add $healing}
    )}

    {IFVAR healing (less_than=0) (
        {VARIABLE {UNIT}.cmsg $healing}
        {VARIABLE {UNIT}.cred 255}
        {VARIABLE_OP {UNIT}.hitpoints add $healing}
    )}

    # clean up
    {CLEAR_VARIABLE ishealthy}
    {CLEAR_VARIABLE healing}
    {CLEAR_VARIABLE rest_healing}
    {CLEAR_VARIABLE curing}
    {CLEAR_VARIABLE max_pos}
    {CLEAR_VARIABLE max_neg}
#enddef

# vim:ts=2 sw=2 et:
